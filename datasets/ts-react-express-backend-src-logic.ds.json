{
    "guid": "b1bb96b2-946b-4ffc-b9e1-8b02f160c7f3",
    "title": "ts-react-express/backend/src/logic",
    "lessons": [
        {
            "guid": "c12e6c3d-5afa-43f7-8632-6899433e83d6",
            "title": "AuthLogic.ts",
            "messages": [
                {
                    "role": "user",
                    "content": "You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."
                },
                {
                    "role": "assistant",
                    "content": "I am a honest, professional, direct, concise programmer."
                },
                {
                    "role": "user",
                    "content": "Please provide me the following file:\n\n- Project: ts-react-express\n- File name: backend/src/logic/AuthLogic.ts"
                },
                {
                    "role": "assistant",
                    "content": "```\nimport fs from \"fs\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { PasswordEntity } from \"../data/PasswordEntity\";\nimport { PasswordLogic } from \"./PasswordLogic\";\nimport { JwtToken } from \"common/src/logic/JwtToken\";\nimport { Config } from \"../Config\";\nimport { SecurableDto } from \"common/src/models/SecurableDto\";\n\nexport class AuthLogic {\n    private static invalidLoginMsg = \"Invalid login!\";\n\n    public user: UserDto | undefined;\n    public securables: SecurableDto[] | undefined;\n\n    private constructor() { }\n\n    public static async passwordLogin(email: string, password: string): Promise<AuthLogic> {\n        const eds = new EntitiesDataSource();\n\n        const user = await eds.userRepository().findOneBy({ emailAddress: email });\n        if (!user)\n            throw new Error(AuthLogic.invalidLoginMsg);\n\n        const passwords = await eds.passwordRepository().findBy({ usersGuid: user.guid });\n        if (!passwords || password.length < 1)\n            throw new Error(AuthLogic.invalidLoginMsg);\n\n        passwords.sort((a, b) => {\n            return a.created.getTime() - b.created.getTime();\n        });\n\n        const rehashedPassword = new PasswordEntity();\n        rehashedPassword.iterations = passwords[0].iterations;\n        rehashedPassword.salt = passwords[0].salt;\n\n        const passLogic = new PasswordLogic(rehashedPassword);\n        passLogic.computeHash(password);\n\n        if (passwords[0].hash !== rehashedPassword.hash)\n            throw new Error(AuthLogic.invalidLoginMsg);\n\n        const ret = new AuthLogic();\n        ret.user = user;\n        ret.securables = await AuthLogic.loadAllowedSecurablesForUser(eds, user);\n        return ret;\n    }\n    public static async tokenLogin(token: string): Promise<AuthLogic> {\n        const key = fs.readFileSync(Config.jwtPrivateKeyFile, { encoding: \"utf8\" });\n        const payload = JwtToken.verify(token, key);\n\n        if (!payload || !payload.data || !payload.data[\"user\"] || !payload.data[\"securables\"])\n            throw new Error(\"Invalid token!\");\n\n        const ret = new AuthLogic();\n        ret.user = payload.data[\"user\"] as UserDto;\n        ret.securables = payload.data[\"securables\"] as SecurableDto[];\n        return ret;\n    }\n\n    private static async loadAllowedSecurablesForUser(eds: EntitiesDataSource, user: UserDto): Promise<SecurableDto[]> {\n        const ret = await eds.securableRepository()\n            .createQueryBuilder(\"s\")\n            .where(`s.guid IN (\n                SELECT\n                    p.securables_guid \n                FROM \n                    \"users\" u\n                    JOIN \"memberships\" m ON u.guid = m.guid\n                    JOIN \"groups\" g ON g.guid  = m.groups_guid\n                    JOIN \"permissions\" p ON p.groups_guid  = m.groups_guid\n                WHERE\n                    p.is_allowed  = TRUE\n                    AND u.guid = :guid\n                GROUP BY p.securables_guid \n            )`, { guid: user.guid })\n            .getMany();\n\n        return ret || [];\n    }\n}\n```"
                }
            ]
        },
        {
            "guid": "f4dc6831-e341-4914-921f-4e7d499e3f89",
            "title": "PasswordLogic.ts",
            "messages": [
                {
                    "role": "user",
                    "content": "You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."
                },
                {
                    "role": "assistant",
                    "content": "I am a honest, professional, direct, concise programmer."
                },
                {
                    "role": "user",
                    "content": "Please provide me the following file:\n\n- Project: ts-react-express\n- File name: backend/src/logic/PasswordLogic.ts"
                },
                {
                    "role": "assistant",
                    "content": "```\nimport * as crypto from \"crypto\";\nimport { PasswordEntity } from \"../data/PasswordEntity\";\n\nexport class PasswordLogic {\n    private entity: PasswordEntity;\n\n    constructor(entity?: PasswordEntity) {\n        if (entity) {\n            this.entity = entity;\n        } else {\n            this.entity = new PasswordEntity();\n            this.entity.iterations = 100000;\n            this.entity.salt = crypto.randomBytes(32).toString(\"hex\");\n        }\n    }\n\n    public computeHash(password: string): PasswordEntity {\n        this.entity.hash = crypto.pbkdf2Sync(\n            password,\n            this.entity.salt,\n            this.entity.iterations,\n            64,\n            \"sha512\"\n        ).toString(\"hex\");\n        return this.entity;\n    }\n}\n```"
                }
            ]
        }
    ]
}
{
	"guid": "d1bc7bc2-1dda-4a30-aab0-56a370cdd3d8",
	"title": "Services",
	"lessons": [
		{
			"guid": "12bb3c4b-92f1-4f7f-91d6-5de9570ce8bc",
			"title": "UserService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { UserDto } from \"common/src/models/UserDto\";\n\n@Entity('users')\nexport class UserEntity implements UserDto, CopyInterface<UserDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'display_name' })\n\tpublic displayName: string = \"\";\n\n\t@Column({ name: 'email_address' })\n\tpublic emailAddress: string = \"\";\n\n\t@Column({ name: 'sms_phone' })\n\tpublic smsPhone: string = \"\";\n\n\tpublic copyFrom(source: UserDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.displayName = source.displayName;\n\t\tthis.emailAddress = source.emailAddress;\n\t\tthis.smsPhone = source.smsPhone;\n\t}\n\tpublic copyTo(dest: UserDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.displayName = this.displayName;\n\t\tdest.emailAddress = this.emailAddress;\n\t\tdest.smsPhone = this.smsPhone;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		},
		{
			"guid": "218c5fe5-ae8c-470d-b016-9f781ca3f1ab",
			"title": "GroupService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { GroupDto } from \"common/src/models/GroupDto\";\n\n@Entity('groups')\nexport class GroupEntity implements GroupDto, CopyInterface<GroupDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'display_name' })\n\tpublic displayName: string = \"\";\n\n\t@Column({ name: 'is_administrator' })\n\tpublic isAdministrator: boolean = false;\n\n\tpublic copyFrom(source: GroupDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.displayName = source.displayName;\n\t\tthis.isAdministrator = source.isAdministrator;\n\t}\n\n\tpublic copyTo(dest: GroupDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.displayName = this.displayName;\n\t\tdest.isAdministrator = this.isAdministrator;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { BaseService } from \"./BaseService\";\nimport { GroupDto } from \"common/src/models/GroupDto\";\nimport { GroupEntity } from \"../data/GroupEntity\";\n\nexport class GroupService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/groups\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/group\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/group/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<GroupDto[]> {\n\t\treturn await ds.groupRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new GroupEntity();\n\t\tentity.copyFrom(req.body as GroupDto);\n\n\t\tawait ds.groupRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.groupRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		},
		{
			"guid": "fbd73992-4009-4233-975c-6272e1e48365",
			"title": "MembershipService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { MembershipDto } from \"common/src/models/MembershipDto\";\n\n@Entity('memberships')\nexport class MembershipEntity implements MembershipDto, CopyInterface<MembershipDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'groups_guid' })\n\tpublic groupsGuid: string = \"\";\n\n\t@Column({ name: 'users_guid' })\n\tpublic usersGuid: string = \"\";\n\n\t@Column({ name: 'is_included' })\n\tpublic isIncluded: boolean = false;\n\n\tpublic copyFrom(source: MembershipDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.groupsGuid = source.groupsGuid;\n\t\tthis.usersGuid = source.usersGuid;\n\t\tthis.isIncluded = source.isIncluded;\n\t}\n\tpublic copyTo(dest: MembershipDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.groupsGuid = this.groupsGuid;\n\t\tdest.usersGuid = this.usersGuid;\n\t\tdest.isIncluded = this.isIncluded;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { BaseService } from \"./BaseService\";\nimport { MembershipDto } from \"common/src/models/MembershipDto\";\nimport { MembershipEntity } from \"../data/MembershipEntity\";\n\nexport class MembershipService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/memberships\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/membership\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/membership/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<MembershipDto[]> {\n\t\treturn await ds.membershipRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new MembershipEntity();\n\t\tentity.copyFrom(req.body as MembershipDto);\n\n\t\tawait ds.membershipRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.membershipRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		},
		{
			"guid": "1b40697e-cdd2-4ca4-9082-1833bc5142d9",
			"title": "PasswordService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { PasswordDto } from \"common/src/models/PasswordDto\";\n\n@Entity('passwords')\nexport class PasswordEntity implements PasswordDto, CopyInterface<PasswordDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'users_guid' })\n\tpublic usersGuid: string = \"\";\n\n\t@Column({ name: 'created' })\n\tpublic created: Date = new Date();\n\n\t@Column({ name: 'salt' })\n\tpublic salt: string = \"\";\n\n\t@Column({ name: 'hash' })\n\tpublic hash: string = \"\";\n\n\t@Column({ name: 'iterations' })\n\tpublic iterations: number = 0;\n\n\tpublic copyFrom(source: PasswordDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.usersGuid = source.usersGuid;\n\t\tthis.created = source.created;\n\t\tthis.salt = source.salt;\n\t\tthis.hash = source.hash;\n\t\tthis.iterations = source.iterations;\n\t}\n\tpublic copyTo(dest: PasswordDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.usersGuid = this.usersGuid;\n\t\tdest.created = this.created;\n\t\tdest.salt = this.salt;\n\t\tdest.hash = this.hash;\n\t\tdest.iterations = this.iterations;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { BaseService } from \"./BaseService\";\nimport { PasswordDto } from \"common/src/models/PasswordDto\";\nimport { PasswordEntity } from \"../data/PasswordEntity\";\n\nexport class PasswordService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/passwords\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/password\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/password/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<PasswordDto[]> {\n\t\treturn await ds.passwordRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new PasswordEntity();\n\t\tentity.copyFrom(req.body as PasswordDto);\n\n\t\tawait ds.passwordRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.passwordRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		},
		{
			"guid": "743992e7-60e5-45f3-aea2-981382792cf1",
			"title": "PermissionService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { PermissionDto } from \"common/src/models/PermissionDto\";\n\n@Entity('permissions')\nexport class PermissionEntity implements PermissionDto, CopyInterface<PermissionDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'groups_guid' })\n\tpublic groupsGuid: string = \"\";\n\n\t@Column({ name: 'securables_guid' })\n\tpublic securablesGuid: string = \"\";\n\n\t@Column({ name: 'is_allowed' })\n\tpublic isAllowed: boolean = false;\n\n\tpublic copyFrom(source: PermissionDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.groupsGuid = source.groupsGuid;\n\t\tthis.securablesGuid = source.securablesGuid;\n\t\tthis.isAllowed = source.isAllowed;\n\t}\n\tpublic copyTo(dest: PermissionDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.groupsGuid = this.groupsGuid;\n\t\tdest.securablesGuid = this.securablesGuid;\n\t\tdest.isAllowed = this.isAllowed;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { BaseService } from \"./BaseService\";\nimport { PermissionDto } from \"common/src/models/PermissionDto\";\nimport { PermissionEntity } from \"../data/PermissionEntity\";\n\nexport class PermissionService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/permissions\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/permission\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/permission/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<PermissionDto[]> {\n\t\treturn await ds.permissionRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new PermissionEntity();\n\t\tentity.copyFrom(req.body as PermissionDto);\n\n\t\tawait ds.permissionRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.permissionRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		},
		{
			"guid": "c71e39a1-e979-47d9-8b54-63bec51782d7",
			"title": "SecurableService",
			"messages": [
				{
					"role": "user",
					"content": "The following EntityDataSource file is: \"../data/EntitiesDataSource\"\n\n```\nimport { DataSource } from \"typeorm\";\nimport { GroupEntity } from \"./GroupEntity\";\nimport { MembershipEntity } from \"./MembershipEntity\";\nimport { PasswordEntity } from \"./PasswordEntity\";\nimport { PermissionEntity } from \"./PermissionEntity\";\nimport { SecurableEntity } from \"./SecurableEntity\";\nimport { UserEntity } from \"./UserEntity\";\nimport { Config } from \"../Config\";\nimport { UserRepository } from \"./UserRepository\";\nimport { GroupRepository } from \"./GroupRepository\";\nimport { MembershipRepository } from \"./MembershipsRepository\";\nimport { PasswordRepository } from \"./PasswordRepository\";\nimport { PermissionRepository } from \"./PermissionsRepository\";\nimport { SecurableRepository } from \"./SecurableRepository\";\n\nexport class EntitiesDataSource extends DataSource {\n\tpublic constructor() {\n\t\tsuper({\n\t\t\ttype: \"postgres\",\n\t\t\thost: Config.dbHost,\n\t\t\tport: Config.dbPort,\n\t\t\tdatabase: Config.dbName,\n\t\t\tusername: Config.dbUsername,\n\t\t\tpassword: Config.dbPassword,\n\t\t\tentities: [\n\t\t\t\tGroupEntity,\n\t\t\t\tMembershipEntity,\n\t\t\t\tPasswordEntity,\n\t\t\t\tPermissionEntity,\n\t\t\t\tSecurableEntity,\n\t\t\t\tUserEntity\n\t\t\t],\n\t\t});\n\t}\n\n\tprivate _groupRepository: GroupRepository | undefined;\n\tpublic groupRepository() {\n\t\tif (!this._groupRepository)\n\t\t\tthis._groupRepository = new GroupRepository(GroupEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._groupRepository;\n\t}\n\n\tprivate _membershipRepository: MembershipRepository | undefined;\n\tpublic membershipRepository() {\n\t\tif (!this._membershipRepository)\n\t\t\tthis._membershipRepository = new MembershipRepository(MembershipEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._membershipRepository;\n\t}\n\n\tprivate _passwordRepository: PasswordRepository | undefined;\n\tpublic passwordRepository() {\n\t\tif (!this._passwordRepository)\n\t\t\tthis._passwordRepository = new PasswordRepository(PasswordEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._passwordRepository;\n\t}\n\n\tprivate _permissionRepository: PermissionRepository | undefined;\n\tpublic permissionRepository() {\n\t\tif (!this._permissionRepository)\n\t\t\tthis._permissionRepository = new PermissionRepository(PermissionEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._permissionRepository;\n\t}\n\n\tprivate _securableRepository: SecurableRepository | undefined;\n\tpublic securableRepository() {\n\t\tif (!this._securableRepository)\n\t\t\tthis._securableRepository = new SecurableRepository(SecurableEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._securableRepository;\n\t}\n\n\tprivate _userRepository: UserRepository | undefined;\n\tpublic userRepository() {\n\t\tif (!this._userRepository)\n\t\t\tthis._userRepository = new UserRepository(UserEntity, this.createEntityManager(), this.createQueryRunner());\n\t\treturn this._userRepository;\n\t}\n}\n```\n\nAssume that if we have an entity its setup in the EntitiesDataSource like the ones included.\n\nThe following ResponseDto file is: \"common/src/models/ResponseDto\"\n\n```\nexport interface ResponseDto<T> {\n\tdata?: T;\n\terror?: string;\n}\n```\n\nThe following BaseService file is: \"./BaseService\"\n\n```\nimport express from \"express\";\nimport { HttpStatus } from \"common/dist/models/HttpStatus\";\nimport { ResponseDto } from \"common/src/models/ResponseDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\n\nexport type Method<T> = (req: express.Request, ds: EntitiesDataSource) => Promise<T>;\n\nexport class BaseService {\n\tpublic async methodWrapper<T>(req: express.Request, resp: express.Response, method: Method<T>): Promise<void> {\n\t\tconst ds = new EntitiesDataSource();\n\n\t\ttry {\n\t\t\tawait ds.initialize();\n\t\t\tconst ret = await method(req, ds);\n\t\t\tresp.status(HttpStatus.OK).send({ data: ret } as ResponseDto<any>);\n\t\t} catch (err) {\n\t\t\tresp.status(HttpStatus.INTERNAL_SERVER_ERROR).send({ err: JSON.stringify(err) } as ResponseDto<any>);\n\t\t} finally {\n\t\t\tawait ds.destroy();\n\t\t}\n\t}\n}\n```\n\nWhen creating a service use the following rules:\n\n- the service should be bound to a specific entity\n- the service class should inherit from the BaseService\n  - the BaseService provides exception handling with a finally to close the data source\n  - the base service defined a method that it will inject with a express.Request and EntityDataSource\n  - call the Method and returns the status and response dto\n- provides methods for\n  - getList that returns all the records\n  - putSave that will create an entity and copyFrom the JSON.parse(body) data transfer object\n  - deleteGuid that will delete the entity by the guid provided.\n\nThe following is an example of a service bound to the UserEntity:\n\n```\nimport express from \"express\";\nimport { UserDto } from \"common/src/models/UserDto\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { UserEntity } from \"../data/UserEntity\";\nimport { BaseService } from \"./BaseService\";\n\nexport class UserService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/users\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/user\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/user/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<UserDto[]> {\n\t\treturn await ds.userRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new UserEntity();\n\t\tentity.copyFrom(req.body as UserDto);\n\n\t\tawait ds.userRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.userRepository().delete({ guid: guid });\n\t}\n}\n```\n\nCreate a service for the following entity:\n\n```\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { SecurableDto } from \"common/src/models/SecurableDto\";\n\n@Entity('securables')\nexport class SecurableEntity implements SecurableDto, CopyInterface<SecurableDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'display_name' })\n\tpublic displayName: string = \"\";\n\n\tpublic copyFrom(source: SecurableDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.displayName = source.displayName;\n\t}\n\tpublic copyTo(dest: SecurableDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.displayName = this.displayName;\n\t}\n}\n```\n"
				},
				{
					"role": "assistant",
					"content": "```typescript\nimport express from \"express\";\nimport { EntitiesDataSource } from \"../data/EntitiesDataSource\";\nimport { BaseService } from \"./BaseService\";\nimport { SecurableDto } from \"common/src/models/SecurableDto\";\nimport { SecurableEntity } from \"../data/SecurableEntity\";\n\nexport class SecurableService extends BaseService {\n\tpublic constructor(app: express.Express) {\n\t\tsuper();\n\n\t\tapp.get(\"/api/v0/securables\", (req, resp) => { this.methodWrapper(req, resp, this.getList) });\n\t\tapp.put(\"/api/v0/securable\", (req, resp) => { this.methodWrapper(req, resp, this.putSave) });\n\t\tapp.delete(\"/api/v0/securable/:guid\", (req, resp) => { this.methodWrapper(req, resp, this.deleteGuid) });\n\t}\n\n\tpublic async getList(req: express.Request, ds: EntitiesDataSource): Promise<SecurableDto[]> {\n\t\treturn await ds.securableRepository().find();\n\t}\n\n\tpublic async putSave(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst entity = new SecurableEntity();\n\t\tentity.copyFrom(req.body as SecurableDto);\n\n\t\tawait ds.securableRepository().save([entity]);\n\t}\n\n\tpublic async deleteGuid(req: express.Request, ds: EntitiesDataSource): Promise<void> {\n\t\tconst guid = req.params[\"guid\"];\n\n\t\tawait ds.securableRepository().delete({ guid: guid });\n\t}\n}\n```"
				}
			]
		}
	]
}
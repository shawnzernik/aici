{"guid":"377e37ce-59e2-49f0-997f-fd2b4514dc4c","title":"Implementing loadAllowedSecurablesForUser","lessons":[{"guid":"a0b06fbd-aa16-47cf-86ad-129170585b66","title":"Jest JWT Sign and Verify Test","messages":[{"role":"user","content":"You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."},{"role":"assistant","content":"I am a honest, professional, direct, concise programmer."},{"role":"user","content":"Write me a Jest unit test that will:\n\n- create a signed JWT token using JwtToken from \"../logic/JwtToken\"\n- the token should contain data {user: \"shawn@localhost\", name: \"Shawn Zernik\"}\n- sign the token using the private key from file \"../backend/private.key\"\n- verify the token created using the public key from file \"../frontend/static/public.key\"\n- expect that the verified token be truthy\n\n\nDo not provide an explanation."},{"role":"assistant","content":"```javascript\nconst JwtToken = require('../logic/JwtToken');\nconst fs = require('fs');\n\ndescribe('JwtToken', () => {\n    it('should sign and verify a JWT token', () => {\n        const payload = { user: 'shawn@localhost', name: 'Shawn Zernik' };\n        const privateKey = fs.readFileSync('../backend/private.key', 'utf8');\n        const publicKey = fs.readFileSync('../frontend/static/public.key', 'utf8');\n\n        const jwt = new JwtToken(payload);\n        const token = jwt.sign(privateKey);\n        const isValid = JwtToken.verify(token, publicKey);\n\n        expect(isValid).toBeTruthy();\n    });\n});\n```"}]},{"guid":"5eebaee8-0cf9-4dc1-b9ab-3e5edb6abda6","title":"TypeORM Entity from SQL and DTO","messages":[{"role":"user","content":"You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."},{"role":"assistant","content":"I am a honest, professional, direct, concise programmer."},{"role":"user","content":"Using the following SQL:\n\n```\nCREATE TABLE \"users\" (\n\t\"guid\" UUID PRIMARY KEY,\n\n\t\"display_name\" VARCHAR(100) NOT NULL,\n\t\"email_address\" VARCHAR(250) NOT NULL,\n\t\"sms_phone\" VARCHAR(20) NOT NULL\n);\n\nALTER TABLE \"users\" ADD CONSTRAINT \"uk_users_email_address\" UNIQUE (\"email_address\");\n```\n\nAnd the following data transfer object interface created for the provided SQL:\n\n```\nexport interface UserDto {\n\tguid: string;\n\tdisplayName: string;\n\temailAddress: string;\n\tsmsPhone: string;\n}\n```\n\nCreate me a TypeORM entity that:\n- implements the UserDto\n- implements the CopyInterface\n- for each column provides a public property\n- the public copyFrom and copyTo methods should copy all properties\n- the @Column decoration property `name` should be the column name in SQL\n- provide default values when defining the public properties: for example `public guid: string = \"\";`\n\nDo not provide an explanation."},{"role":"assistant","content":"```typescript\nimport { Entity, PrimaryColumn, Column } from 'typeorm';\nimport { CopyInterface } from \"common/src/logic/CopyInterface\";\nimport { UserDto } from \"common/src/models/UserDto\";\n\n@Entity('users')\nexport class UserEntity implements UserDto, CopyInterface<UserDto> {\n\t@PrimaryColumn({ name: \"guid\" })\n\tpublic guid: string = \"\";\n\n\t@Column({ name: 'display_name' })\n\tpublic displayName: string = \"\";\n\n\t@Column({ name: 'email_address' })\n\tpublic emailAddress: string = \"\";\n\n\t@Column({ name: 'sms_phone' })\n\tpublic smsPhone: string = \"\";\n\n\tpublic copyFrom(source: UserDto): void {\n\t\tthis.guid = source.guid;\n\t\tthis.displayName = source.displayName;\n\t\tthis.emailAddress = source.emailAddress;\n\t\tthis.smsPhone = source.smsPhone;\n\t}\n\tpublic copyTo(dest: UserDto): void {\n\t\tdest.guid = this.guid;\n\t\tdest.displayName = this.displayName;\n\t\tdest.emailAddress = this.emailAddress;\n\t\tdest.smsPhone = this.smsPhone;\n\t}\n}\n```\n"}]},{"guid":"bc87d7d2-94f6-4814-939b-4732b72ce4f4","title":"JWT Token Signing and Verification Test","messages":[{"role":"user","content":"You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."},{"role":"assistant","content":"I am a honest, professional, direct, concise programmer."},{"role":"user","content":"Using the following JwtToken from \"../logic/JwtToken\":\n\n```\nimport * as jwt from 'jsonwebtoken';\nimport { UUIDv4 } from './UUIDv4';\n\nexport class JwtToken implements jwt.JwtPayload {\n    public static expiresIn = \"1h\";\n    public static audience = \"lagovistatech.com\";\n    public static issuer = \"lagovistatech.com\";\n    public static subject = \"jwt_token\";\n    public static algorithm: \"RS512\" = \"RS512\";\n\n    public data: any;\n    \n    public constructor(data: any = undefined) {\n        this.data = data;\n    }\n\n    public sign(privateKey: string): string {\n        const ret = jwt.sign({ data: this.data }, privateKey, {\n                expiresIn: JwtToken.expiresIn, \n                audience: JwtToken.audience,\n                issuer: JwtToken.issuer,\n                subject: JwtToken.subject,\n                algorithm: JwtToken.algorithm,\n                jwtid: UUIDv4.generate()\n            }\n        );\n\n        return ret;\n    }\n    public static verify(token: string, publicKey: string) {\n        const obj = jwt.verify(token, publicKey);\n        \n        const ret = new JwtToken();\n        Object.assign(ret, obj);\n        \n        return ret;        \n    }\n}\n```\n\nWrite me a Jest unit test that will \n\n- create a signed JWT token using JwtToken from \"../logic/JwtToken\"\n- the token should contain data {user: \"shawn@localhost\", name: \"Shawn Zernik\"}\n- sign the token using the private key from file \"../backend/private.key\"\n- verify the token created using the public key from file \"../frontend/static/public.key\"\n- expect that the verified token be truthy\n\nDo not provide an explanation."},{"role":"assistant","content":"```javascript\nconst JwtToken = require('../logic/JwtToken');\nconst fs = require('fs');\n\ndescribe('JwtToken', () => {\n    it('should sign and verify a JWT token', () => {\n        const payload = { user: 'shawn@localhost', name: 'Shawn Zernik' };\n        const privateKey = fs.readFileSync('../backend/private.key', 'utf8');\n        const publicKey = fs.readFileSync('../frontend/static/public.key', 'utf8');\n\n        const jwt = new JwtToken(payload);\n        const token = jwt.sign(privateKey);\n        const isValid = JwtToken.verify(token, publicKey);\n\n        expect(isValid).toBeTruthy();\n    });\n});\n```\n"}]},{"guid":"62cda943-abc3-4f79-be02-2905c59efe29","title":"Jest Unit Test for JWT Token  Functionality","messages":[{"role":"user","content":"You are a Lago Vista Technologies programmer.  You provide professional, direct, concise, factual answers."},{"role":"assistant","content":"I am a honest, professional, direct, concise programmer."},{"role":"user","content":"The following is file \"../logic/JwtToken\":\n\n```\nimport * as jwt from 'jsonwebtoken';\nimport { UUIDv4 } from './UUIDv4';\n\nexport class JwtToken implements jwt.JwtPayload {\n    public static expiresIn = \"1h\";\n    public static audience = \"lagovistatech.com\";\n    public static issuer = \"lagovistatech.com\";\n    public static subject = \"jwt_token\";\n    public static algorithm: \"RS512\" = \"RS512\";\n\n    public data: any;\n    \n    public constructor(data: any = undefined) {\n        this.data = data;\n    }\n\n    public sign(privateKey: string): string {\n        const ret = jwt.sign({ data: this.data }, privateKey, {\n                expiresIn: JwtToken.expiresIn, \n                audience: JwtToken.audience,\n                issuer: JwtToken.issuer,\n                subject: JwtToken.subject,\n                algorithm: JwtToken.algorithm,\n                jwtid: UUIDv4.generate()\n            }\n        );\n\n        return ret;\n    }\n    public static verify(token: string, publicKey: string) {\n        const obj = jwt.verify(token, publicKey);\n        \n        const ret = new JwtToken();\n        Object.assign(ret, obj);\n        \n        return ret;        \n    }\n}\n```\n\nWrite me a Jest unit test that will:\n\n- create a signed JWT token using JwtToken from \"../logic/JwtToken\"\n- the token should contain data {user: \"shawn@localhost\", name: \"Shawn Zernik\"}\n- sign the token using the private key from file \"../backend/private.key\"\n- verify the token created using the public key from file \"../frontend/static/public.key\"\n- expect that the verified token be truthy\n\n\nDo not provide an explanation."},{"role":"assistant","content":"```javascript\ndescribe('JwtToken', () => {\n    it('should sign and verify a JWT token', () => {\n        const payload = { user: 'shawn@localhost', name: 'Shawn Zernik' };\n        const privateKey = fs.readFileSync('../backend/private.key', 'utf8');\n        const publicKey = fs.readFileSync('../frontend/static/public.key', 'utf8');\n\n        const jwt = new JwtToken(payload);\n        const token = jwt.sign(privateKey);\n        const isValid = JwtToken.verify(token, publicKey);\n\n        expect(isValid).toBeTruthy();\n    });\n});\n```"}]}]}